schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
columns and relationships of "customers"
"""
type customers {
  birth_date: date!
  name: name!

  """
  fetch data from the table: "orders"
  """
  orders(
    """distinct select on columns"""
    distinct_on: [orders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [orders_order_by!]

    """filter the rows returned"""
    where: orders_bool_exp
  ): [orders!]!

  """An aggregate relationship"""
  orders_aggregate(
    """distinct select on columns"""
    distinct_on: [orders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [orders_order_by!]

    """filter the rows returned"""
    where: orders_bool_exp
  ): orders_aggregate!
  uuid: uuid!
  vip: Boolean!
}

"""
aggregated selection of "customers"
"""
type customers_aggregate {
  aggregate: customers_aggregate_fields
  nodes: [customers!]!
}

"""
aggregate fields of "customers"
"""
type customers_aggregate_fields {
  count(columns: [customers_select_column!], distinct: Boolean): Int!
  max: customers_max_fields
  min: customers_min_fields
}

"""
Boolean expression to filter rows from the table "customers". All fields are combined with a logical 'AND'.
"""
input customers_bool_exp {
  _and: [customers_bool_exp!]
  _not: customers_bool_exp
  _or: [customers_bool_exp!]
  birth_date: date_comparison_exp
  name: name_comparison_exp
  orders: orders_bool_exp
  uuid: uuid_comparison_exp
  vip: Boolean_comparison_exp
}

"""
unique or primary key constraints on table "customers"
"""
enum customers_constraint {
  """unique or primary key constraint"""
  customers_pkey
}

"""
input type for inserting data into table "customers"
"""
input customers_insert_input {
  birth_date: date
  name: name
  orders: orders_arr_rel_insert_input
  uuid: uuid
  vip: Boolean
}

"""aggregate max on columns"""
type customers_max_fields {
  birth_date: date
  uuid: uuid
}

"""aggregate min on columns"""
type customers_min_fields {
  birth_date: date
  uuid: uuid
}

"""
response of any mutation on the table "customers"
"""
type customers_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [customers!]!
}

"""
input type for inserting object relation for remote table "customers"
"""
input customers_obj_rel_insert_input {
  data: customers_insert_input!

  """upsert condition"""
  on_conflict: customers_on_conflict
}

"""
on_conflict condition type for table "customers"
"""
input customers_on_conflict {
  constraint: customers_constraint!
  update_columns: [customers_update_column!]! = []
  where: customers_bool_exp
}

"""Ordering options when selecting data from "customers"."""
input customers_order_by {
  birth_date: order_by
  name: order_by
  orders_aggregate: orders_aggregate_order_by
  uuid: order_by
  vip: order_by
}

"""primary key columns input for table: customers"""
input customers_pk_columns_input {
  uuid: uuid!
}

"""
select columns of table "customers"
"""
enum customers_select_column {
  """column name"""
  birth_date

  """column name"""
  name

  """column name"""
  uuid

  """column name"""
  vip
}

"""
input type for updating data in table "customers"
"""
input customers_set_input {
  birth_date: date
  name: name
  uuid: uuid
  vip: Boolean
}

"""
update columns of table "customers"
"""
enum customers_update_column {
  """column name"""
  birth_date

  """column name"""
  name

  """column name"""
  uuid

  """column name"""
  vip
}

scalar date

"""
Boolean expression to compare columns of type "date". All fields are combined with logical 'AND'.
"""
input date_comparison_exp {
  _eq: date
  _gt: date
  _gte: date
  _in: [date!]
  _is_null: Boolean
  _lt: date
  _lte: date
  _neq: date
  _nin: [date!]
}

scalar money

"""
Boolean expression to compare columns of type "money". All fields are combined with logical 'AND'.
"""
input money_comparison_exp {
  _eq: money
  _gt: money
  _gte: money
  _in: [money!]
  _is_null: Boolean
  _lt: money
  _lte: money
  _neq: money
  _nin: [money!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "customers"
  """
  delete_customers(
    """filter the rows which have to be deleted"""
    where: customers_bool_exp!
  ): customers_mutation_response

  """
  delete single row from the table: "customers"
  """
  delete_customers_by_pk(uuid: uuid!): customers

  """
  delete data from the table: "orders"
  """
  delete_orders(
    """filter the rows which have to be deleted"""
    where: orders_bool_exp!
  ): orders_mutation_response

  """
  delete single row from the table: "orders"
  """
  delete_orders_by_pk(uuid: uuid!): orders

  """
  insert data into the table: "customers"
  """
  insert_customers(
    """the rows to be inserted"""
    objects: [customers_insert_input!]!

    """upsert condition"""
    on_conflict: customers_on_conflict
  ): customers_mutation_response

  """
  insert a single row into the table: "customers"
  """
  insert_customers_one(
    """the row to be inserted"""
    object: customers_insert_input!

    """upsert condition"""
    on_conflict: customers_on_conflict
  ): customers

  """
  insert data into the table: "orders"
  """
  insert_orders(
    """the rows to be inserted"""
    objects: [orders_insert_input!]!

    """upsert condition"""
    on_conflict: orders_on_conflict
  ): orders_mutation_response

  """
  insert a single row into the table: "orders"
  """
  insert_orders_one(
    """the row to be inserted"""
    object: orders_insert_input!

    """upsert condition"""
    on_conflict: orders_on_conflict
  ): orders

  """
  update data of the table: "customers"
  """
  update_customers(
    """sets the columns of the filtered rows to the given values"""
    _set: customers_set_input

    """filter the rows which have to be updated"""
    where: customers_bool_exp!
  ): customers_mutation_response

  """
  update single row of the table: "customers"
  """
  update_customers_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: customers_set_input
    pk_columns: customers_pk_columns_input!
  ): customers

  """
  update data of the table: "orders"
  """
  update_orders(
    """increments the numeric columns with given value of the filtered values"""
    _inc: orders_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: orders_set_input

    """filter the rows which have to be updated"""
    where: orders_bool_exp!
  ): orders_mutation_response

  """
  update single row of the table: "orders"
  """
  update_orders_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: orders_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: orders_set_input
    pk_columns: orders_pk_columns_input!
  ): orders
}

scalar name

"""
Boolean expression to compare columns of type "name". All fields are combined with logical 'AND'.
"""
input name_comparison_exp {
  _eq: name
  _gt: name
  _gte: name
  _in: [name!]
  _is_null: Boolean
  _lt: name
  _lte: name
  _neq: name
  _nin: [name!]
}

scalar numeric

"""
Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "orders"
"""
type orders {
  """An object relationship"""
  customer: customers!
  customer_id: uuid!
  date: timestamptz!
  items_number: numeric!
  total_sum: money!
  uuid: uuid!
}

"""
aggregated selection of "orders"
"""
type orders_aggregate {
  aggregate: orders_aggregate_fields
  nodes: [orders!]!
}

"""
aggregate fields of "orders"
"""
type orders_aggregate_fields {
  avg: orders_avg_fields
  count(columns: [orders_select_column!], distinct: Boolean): Int!
  max: orders_max_fields
  min: orders_min_fields
  stddev: orders_stddev_fields
  stddev_pop: orders_stddev_pop_fields
  stddev_samp: orders_stddev_samp_fields
  sum: orders_sum_fields
  var_pop: orders_var_pop_fields
  var_samp: orders_var_samp_fields
  variance: orders_variance_fields
}

"""
order by aggregate values of table "orders"
"""
input orders_aggregate_order_by {
  avg: orders_avg_order_by
  count: order_by
  max: orders_max_order_by
  min: orders_min_order_by
  stddev: orders_stddev_order_by
  stddev_pop: orders_stddev_pop_order_by
  stddev_samp: orders_stddev_samp_order_by
  sum: orders_sum_order_by
  var_pop: orders_var_pop_order_by
  var_samp: orders_var_samp_order_by
  variance: orders_variance_order_by
}

"""
input type for inserting array relation for remote table "orders"
"""
input orders_arr_rel_insert_input {
  data: [orders_insert_input!]!

  """upsert condition"""
  on_conflict: orders_on_conflict
}

"""aggregate avg on columns"""
type orders_avg_fields {
  items_number: Float
  total_sum: Float
}

"""
order by avg() on columns of table "orders"
"""
input orders_avg_order_by {
  items_number: order_by
  total_sum: order_by
}

"""
Boolean expression to filter rows from the table "orders". All fields are combined with a logical 'AND'.
"""
input orders_bool_exp {
  _and: [orders_bool_exp!]
  _not: orders_bool_exp
  _or: [orders_bool_exp!]
  customer: customers_bool_exp
  customer_id: uuid_comparison_exp
  date: timestamptz_comparison_exp
  items_number: numeric_comparison_exp
  total_sum: money_comparison_exp
  uuid: uuid_comparison_exp
}

"""
unique or primary key constraints on table "orders"
"""
enum orders_constraint {
  """unique or primary key constraint"""
  orders_pkey
}

"""
input type for incrementing numeric columns in table "orders"
"""
input orders_inc_input {
  items_number: numeric
  total_sum: money
}

"""
input type for inserting data into table "orders"
"""
input orders_insert_input {
  customer: customers_obj_rel_insert_input
  customer_id: uuid
  date: timestamptz
  items_number: numeric
  total_sum: money
  uuid: uuid
}

"""aggregate max on columns"""
type orders_max_fields {
  customer_id: uuid
  date: timestamptz
  items_number: numeric
  total_sum: money
  uuid: uuid
}

"""
order by max() on columns of table "orders"
"""
input orders_max_order_by {
  customer_id: order_by
  date: order_by
  items_number: order_by
  total_sum: order_by
  uuid: order_by
}

"""aggregate min on columns"""
type orders_min_fields {
  customer_id: uuid
  date: timestamptz
  items_number: numeric
  total_sum: money
  uuid: uuid
}

"""
order by min() on columns of table "orders"
"""
input orders_min_order_by {
  customer_id: order_by
  date: order_by
  items_number: order_by
  total_sum: order_by
  uuid: order_by
}

"""
response of any mutation on the table "orders"
"""
type orders_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [orders!]!
}

"""
on_conflict condition type for table "orders"
"""
input orders_on_conflict {
  constraint: orders_constraint!
  update_columns: [orders_update_column!]! = []
  where: orders_bool_exp
}

"""Ordering options when selecting data from "orders"."""
input orders_order_by {
  customer: customers_order_by
  customer_id: order_by
  date: order_by
  items_number: order_by
  total_sum: order_by
  uuid: order_by
}

"""primary key columns input for table: orders"""
input orders_pk_columns_input {
  uuid: uuid!
}

"""
select columns of table "orders"
"""
enum orders_select_column {
  """column name"""
  customer_id

  """column name"""
  date

  """column name"""
  items_number

  """column name"""
  total_sum

  """column name"""
  uuid
}

"""
input type for updating data in table "orders"
"""
input orders_set_input {
  customer_id: uuid
  date: timestamptz
  items_number: numeric
  total_sum: money
  uuid: uuid
}

"""aggregate stddev on columns"""
type orders_stddev_fields {
  items_number: Float
  total_sum: Float
}

"""
order by stddev() on columns of table "orders"
"""
input orders_stddev_order_by {
  items_number: order_by
  total_sum: order_by
}

"""aggregate stddev_pop on columns"""
type orders_stddev_pop_fields {
  items_number: Float
  total_sum: Float
}

"""
order by stddev_pop() on columns of table "orders"
"""
input orders_stddev_pop_order_by {
  items_number: order_by
  total_sum: order_by
}

"""aggregate stddev_samp on columns"""
type orders_stddev_samp_fields {
  items_number: Float
  total_sum: Float
}

"""
order by stddev_samp() on columns of table "orders"
"""
input orders_stddev_samp_order_by {
  items_number: order_by
  total_sum: order_by
}

"""aggregate sum on columns"""
type orders_sum_fields {
  items_number: numeric
  total_sum: money
}

"""
order by sum() on columns of table "orders"
"""
input orders_sum_order_by {
  items_number: order_by
  total_sum: order_by
}

"""
update columns of table "orders"
"""
enum orders_update_column {
  """column name"""
  customer_id

  """column name"""
  date

  """column name"""
  items_number

  """column name"""
  total_sum

  """column name"""
  uuid
}

"""aggregate var_pop on columns"""
type orders_var_pop_fields {
  items_number: Float
  total_sum: Float
}

"""
order by var_pop() on columns of table "orders"
"""
input orders_var_pop_order_by {
  items_number: order_by
  total_sum: order_by
}

"""aggregate var_samp on columns"""
type orders_var_samp_fields {
  items_number: Float
  total_sum: Float
}

"""
order by var_samp() on columns of table "orders"
"""
input orders_var_samp_order_by {
  items_number: order_by
  total_sum: order_by
}

"""aggregate variance on columns"""
type orders_variance_fields {
  items_number: Float
  total_sum: Float
}

"""
order by variance() on columns of table "orders"
"""
input orders_variance_order_by {
  items_number: order_by
  total_sum: order_by
}

type query_root {
  """
  fetch data from the table: "customers"
  """
  customers(
    """distinct select on columns"""
    distinct_on: [customers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customers_order_by!]

    """filter the rows returned"""
    where: customers_bool_exp
  ): [customers!]!

  """
  fetch aggregated fields from the table: "customers"
  """
  customers_aggregate(
    """distinct select on columns"""
    distinct_on: [customers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customers_order_by!]

    """filter the rows returned"""
    where: customers_bool_exp
  ): customers_aggregate!

  """fetch data from the table: "customers" using primary key columns"""
  customers_by_pk(uuid: uuid!): customers

  """
  fetch data from the table: "orders"
  """
  orders(
    """distinct select on columns"""
    distinct_on: [orders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [orders_order_by!]

    """filter the rows returned"""
    where: orders_bool_exp
  ): [orders!]!

  """An aggregate relationship"""
  orders_aggregate(
    """distinct select on columns"""
    distinct_on: [orders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [orders_order_by!]

    """filter the rows returned"""
    where: orders_bool_exp
  ): orders_aggregate!

  """fetch data from the table: "orders" using primary key columns"""
  orders_by_pk(uuid: uuid!): orders
}

type subscription_root {
  """
  fetch data from the table: "customers"
  """
  customers(
    """distinct select on columns"""
    distinct_on: [customers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customers_order_by!]

    """filter the rows returned"""
    where: customers_bool_exp
  ): [customers!]!

  """
  fetch aggregated fields from the table: "customers"
  """
  customers_aggregate(
    """distinct select on columns"""
    distinct_on: [customers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customers_order_by!]

    """filter the rows returned"""
    where: customers_bool_exp
  ): customers_aggregate!

  """fetch data from the table: "customers" using primary key columns"""
  customers_by_pk(uuid: uuid!): customers

  """
  fetch data from the table: "orders"
  """
  orders(
    """distinct select on columns"""
    distinct_on: [orders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [orders_order_by!]

    """filter the rows returned"""
    where: orders_bool_exp
  ): [orders!]!

  """An aggregate relationship"""
  orders_aggregate(
    """distinct select on columns"""
    distinct_on: [orders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [orders_order_by!]

    """filter the rows returned"""
    where: orders_bool_exp
  ): orders_aggregate!

  """fetch data from the table: "orders" using primary key columns"""
  orders_by_pk(uuid: uuid!): orders
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

